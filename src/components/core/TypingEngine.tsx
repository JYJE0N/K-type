"use client";

import { useEffect, useRef, useCallback, useState } from "react";
import { useTypingStore } from "@/stores/typingStore";
import { useStatsStore } from "@/stores/statsStore";
import { useSettingsStore } from "@/stores/settingsStore";
import { useUserProgressStore } from "@/stores/userProgressStore";
import { TextRenderer } from "./TextRenderer";
import { InputHandler } from "./InputHandler";
import { getLanguagePack } from "@/modules/languages";
import { TextGenerator } from "@/utils/textGenerator";
import { useRouter } from "next/navigation";
import { PlayCircle, PauseCircle, StopCircle, Globe } from "lucide-react";

interface TypingEngineProps {
  className?: string;
}

export function TypingEngine({ className = "" }: TypingEngineProps) {
  const router = useRouter();
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const isComposing = useRef(false);
  const [currentTime, setCurrentTime] = useState(0);

  // Store ÏÉÅÌÉú
  const {
    isActive,
    isPaused,
    isCompleted,
    isCountingDown,
    countdownValue,
    targetText,
    currentIndex,
    userInput,
    keystrokes,
    mistakes,
    startTime,
    resetTest,
    setTargetText,
    startCountdown,
    pauseTest,
    resumeTest,
    stopTest,
    getCurrentChar,
  } = useTypingStore();

  const { calculateStats, resetStats } = useStatsStore();
  const { language, textType, testMode, testTarget } = useSettingsStore();
  const {
    initializeUser,
    recordTest,
    updateCharacterStats,
    updateMistakePattern,
  } = useUserProgressStore();

  // ÌÖåÏä§Ìä∏ Ïû¨ÏãúÏûë Ìï∏Îì§Îü¨ (ÏÉàÎ°úÏö¥ ÌÖçÏä§Ìä∏ ÏÉùÏÑ±)
  const handleRestart = useCallback(() => {
    const languagePack = getLanguagePack(language);
    if (!languagePack) return;

    const textGenerator = new TextGenerator(languagePack);

    // Îã®Ïñ¥ Ïàò Í≥ÑÏÇ∞ (ÏãúÍ∞Ñ Î™®ÎìúÏùò Í≤ΩÏö∞ ÏòàÏÉÅ WPM Í∏∞Î∞ò)
    let wordCount = testTarget;
    if (testMode === "time") {
      // ÌèâÍ∑† WPM 40 Í∏∞Ï§ÄÏúºÎ°ú Îã®Ïñ¥ Ïàò Í≥ÑÏÇ∞
      wordCount = Math.max(50, Math.floor((testTarget / 60) * 40));
    }

    const newText = textGenerator.generateText(textType, { wordCount });
    console.log("üîÑ Generated new text via Shift+Enter:", {
      newText: newText.substring(0, 50) + "...",
      length: newText.length,
      language,
      textType,
      wordCount,
    });

    setTargetText(newText);
    resetTest();
    resetStats();
  }, [
    language,
    textType,
    testMode,
    testTarget,
    setTargetText,
    resetTest,
    resetStats,
  ]);

  // IME Ï°∞Ìï© ÏÉÅÌÉú Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleCompositionChange = useCallback((composing: boolean) => {
    isComposing.current = composing;
    console.log("üé≠ Composition state changed:", composing);
  }, []);

  // ÌÉÄÏù¥Î®∏ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (isActive && !isPaused && !isCompleted && startTime) {
      timerRef.current = setInterval(() => {
        setCurrentTime((Date.now() - startTime.getTime()) / 1000);
      }, 100); // 100msÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
    } else {
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    }

    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    };
  }, [isActive, isPaused, isCompleted, startTime]);

  // Ïã§ÏãúÍ∞Ñ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏ (IME ÏÉÅÌÉúÏôÄ Î¨¥Í¥ÄÌïòÍ≤å Ìï≠ÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏)
  useEffect(() => {
    if (isActive && !isPaused && !isCompleted) {
      intervalRef.current = setInterval(() => {
        calculateStats(keystrokes, mistakes, startTime, currentIndex, undefined, textType);
      }, 250); // 250msÎßàÎã§ Îçî ÏûêÏ£º ÏóÖÎç∞Ïù¥Ìä∏
    } else {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };
  }, [
    isActive,
    isPaused,
    isCompleted,
    keystrokes,
    mistakes,
    startTime,
    calculateStats,
    currentIndex,
  ]);

  // Ïª¥Ìè¨ÎÑåÌä∏ Ï¥àÍ∏∞Ìôî - ÏÇ¨Ïö©Ïûê Ï¥àÍ∏∞ÌôîÎßå
  useEffect(() => {
    initializeUser();
  }, []);

  // ÌÖåÏä§Ìä∏ ÏôÑÎ£å Ïãú MongoDBÏóê Ï†ÄÏû• Î∞è stats ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
  useEffect(() => {
    if (isCompleted && startTime && keystrokes.length > 0) {
      // ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ÏùÑ Ï£ºÏñ¥ ÏµúÏ¢Ö ÌÜµÍ≥ÑÍ∞Ä Í≥ÑÏÇ∞ÎêòÎèÑÎ°ù Ìï®
      setTimeout(() => {
        const duration = (Date.now() - startTime.getTime()) / 1000;
        const wordsTyped = Math.floor(currentIndex / 5);

        // ÌòÑÏû¨ ÌÜµÍ≥Ñ storeÏóêÏÑú ÏµúÏã† Í∞í Í∞ÄÏ†∏Ïò§Í∏∞
        const currentStats = useStatsStore.getState().liveStats;

        console.log("üìä ÌÖåÏä§Ìä∏ ÏôÑÎ£å ÌÜµÍ≥Ñ:", {
          duration,
          wordsTyped,
          currentIndex,
          cpm: currentStats.cpm,
          wpm: currentStats.wpm,
          accuracy: currentStats.accuracy,
          consistency: currentStats.consistency,
          mistakes: mistakes.length,
        });

        // NaN Ï≤¥ÌÅ¨ Î∞è Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
        const validCPM =
          isNaN(currentStats.cpm) || !isFinite(currentStats.cpm)
            ? Math.round(currentIndex / (duration / 60))
            : currentStats.cpm;
        const validWPM =
          isNaN(currentStats.wpm) || !isFinite(currentStats.wpm)
            ? Math.round(wordsTyped / (duration / 60))
            : currentStats.wpm;
        const validAccuracy =
          isNaN(currentStats.accuracy) || !isFinite(currentStats.accuracy)
            ? keystrokes.length > 0
              ? Math.round(
                  (keystrokes.filter((k) => k.correct).length /
                    keystrokes.length) *
                    100
                )
              : 100
            : currentStats.accuracy;
        const validConsistency =
          isNaN(currentStats.consistency) || !isFinite(currentStats.consistency)
            ? 0
            : currentStats.consistency;

        // ÏµúÏÜåÌïúÏùò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏùÑ ÎïåÎßå Ï†ÄÏû•
        if (duration > 0 && currentIndex > 0) {
          console.log("üìä ÌÖåÏä§Ìä∏ Í≤∞Í≥º Ï†ÄÏû•:", {
            cpm: validCPM,
            wpm: validWPM,
            accuracy: validAccuracy,
            duration,
            currentIndex,
            mistakes: mistakes.length,
          });

          // MongoDBÏóê ÌÖåÏä§Ìä∏ Í≤∞Í≥º Ï†ÄÏû•
          recordTest({
            id: `test-${Date.now()}`,
            mode: testMode,
            target: testTarget,
            textType,
            language,
            device: "desktop",
            duration,
            cpm: validCPM,
            wpm: validWPM,
            rawWpm: validWPM,
            rawCpm: validCPM,
            accuracy: validAccuracy,
            consistency: validConsistency,
            mistakes,
            keystrokes,
          });

          // ÏïΩÏ†ê Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
          mistakes.forEach((mistake) => {
            const wrongChar = userInput[mistake.position] || "";
            const correctChar = targetText[mistake.position] || "";
            if (correctChar) {
              updateMistakePattern(wrongChar, correctChar);
              updateCharacterStats(correctChar, false, 0);
            }
          });
        }

        // stats ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô (Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÌõÑ)
        setTimeout(() => {
          router.push("/stats");
        }, 1000);
      }, 500); // 500ms ÏßÄÏó∞
    }
  }, [isCompleted, router]);

  // ÌÖåÏä§Ìä∏ Î™®ÎìúÏóê Îî∞Î•∏ ÏôÑÎ£å Ï°∞Í±¥ ÌôïÏù∏
  useEffect(() => {
    if (!isActive || isPaused || isCompleted) return;

    // ÌÖçÏä§Ìä∏Î•º Î™®Îëê ÏôÑÏÑ±Ìïú Í≤ΩÏö∞
    if (currentIndex >= targetText.length) {
      console.log("üèÅ ÌÖçÏä§Ìä∏ ÏôÑÏÑ±ÏúºÎ°ú ÌÖåÏä§Ìä∏ ÏôÑÎ£å");
      useTypingStore.getState().completeTest();
      return;
    }

    if (testMode === "time" && startTime) {
      const elapsed = (Date.now() - startTime.getTime()) / 1000;
      if (elapsed >= testTarget) {
        console.log("üèÅ ÏãúÍ∞Ñ Ï¥àÍ≥ºÎ°ú ÌÖåÏä§Ìä∏ ÏôÑÎ£å");
        useTypingStore.getState().completeTest();
      }
    } else if (testMode === "words") {
      const wordsTyped = Math.floor(currentIndex / 5); // 5Î¨∏Ïûê = 1Îã®Ïñ¥
      if (wordsTyped >= testTarget) {
        console.log("üèÅ Î™©Ìëú Îã®Ïñ¥ Ïàò Îã¨ÏÑ±ÏúºÎ°ú ÌÖåÏä§Ìä∏ ÏôÑÎ£å");
        useTypingStore.getState().completeTest();
      }
    }
  }, [
    isActive,
    isPaused,
    isCompleted,
    currentIndex,
    startTime,
    testMode,
    testTarget,
    targetText.length,
  ]);

  // Shift+Enter Îã®Ï∂ïÌÇ§ Ï≤òÎ¶¨
  useEffect(() => {
    const handleGlobalKeyDown = (event: KeyboardEvent) => {
      console.log("üîç Global keydown:", {
        key: event.key,
        shiftKey: event.shiftKey,
        ctrlKey: event.ctrlKey,
        altKey: event.altKey,
      });

      // Shift+Enter Ï°∞Ìï© Í∞êÏßÄ
      if (event.shiftKey && event.key === "Enter") {
        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();
        console.log("üöÄ Shift+Enter detected - Restarting test");

        // ÌÖåÏä§Ìä∏ Ïû¨ÏãúÏûë
        handleRestart();
        return false; // Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ ÏôÑÏ†Ñ Ï§ëÎã®
      }
    };

    // Ï†ÑÏó≠ ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù (capture phaseÏóêÏÑú Î®ºÏ†Ä Ï≤òÎ¶¨)
    document.addEventListener("keydown", handleGlobalKeyDown, {
      capture: true,
    });

    return () => {
      document.removeEventListener("keydown", handleGlobalKeyDown, {
        capture: true,
      });
    };
  }, [handleRestart]);

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
  useEffect(() => {
    return () => {
      resetStats();
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [resetStats]);

  // ÏßÑÌñâÎ•† Í≥ÑÏÇ∞
  // const progress = getProgress() // ÎØ∏ÏÇ¨Ïö©ÏúºÎ°ú Ï£ºÏÑù Ï≤òÎ¶¨
  // const currentChar = getCurrentChar(); // ÎØ∏ÏÇ¨Ïö©ÏúºÎ°ú Ï£ºÏÑù Ï≤òÎ¶¨

  return (
    <div
      className={`typing-engine ${className}`}
      style={{
        paddingTop: "var(--spacing-lg)",
        paddingBottom: "var(--spacing-lg)",
      }}
    >

      {/* Ïñ∏Ïñ¥ ÏÑ†ÌÉù (Ïù∏Ìíã ÌïÑÎìú ÏúÑ) */}
      <div className="flex justify-center mb-6">
        <div className="flex items-center gap-3 bg-surface/60 backdrop-blur-sm rounded-lg p-2">
          <div className="flex items-center gap-2">
            <Globe className="w-4 h-4 text-text-secondary" />
            <span className="text-sm text-text-secondary font-medium">Ïñ∏Ïñ¥</span>
          </div>
          <button
            onClick={() => useSettingsStore.getState().setLanguage("korean")}
            className={`px-4 py-2 text-sm rounded-md font-medium transition-colors ${
              language === "korean" ? "header-menu-active" : "header-menu-inactive"
            }`}
          >
            ÌïúÍµ≠Ïñ¥
          </button>
          <button
            onClick={() => useSettingsStore.getState().setLanguage("english")}
            className={`px-4 py-2 text-sm rounded-md font-medium transition-colors ${
              language === "english" ? "header-menu-active" : "header-menu-inactive"
            }`}
          >
            English
          </button>
        </div>
      </div>

      {/* Î©îÏù∏ ÌÉÄÏù¥Ìïë ÏòÅÏó≠ */}
      <div className="relative">
        {/* ÏãúÍ∞Ñ ÌëúÏãú (Ïù∏Ìíã ÌïÑÎìú ÏúÑ) */}
        {isActive && !isPaused && !isCompleted && (
          <div
            className="text-center"
            style={{ marginBottom: "var(--spacing-md)" }}
          >
            <div
              className="inline-flex items-center btn btn-sm btn-secondary"
              style={{ cursor: "default" }}
            >
              <div className="text-md font-mono text-typing-accent">
                {(() => {
                  const mins = Math.floor(currentTime / 60);
                  const secs = Math.floor(currentTime % 60);
                  return `${mins.toString().padStart(2, "0")}:${secs
                    .toString()
                    .padStart(2, "0")}`;
                })()}
              </div>
            </div>
          </div>
        )}

        {/* ÌÖçÏä§Ìä∏ Î†åÎçîÎü¨ÏôÄ ÏûÖÎ†• Ìï∏Îì§Îü¨Î•º Í∞êÏã∏Îäî Ïª®ÌÖåÏù¥ÎÑà */}
        <div className="relative mb-4">
          {/* ÌÖçÏä§Ìä∏ Î†åÎçîÎü¨ */}
          <TextRenderer
            text={targetText}
            currentIndex={currentIndex}
            userInput={userInput}
            mistakes={mistakes.map((m) => m.position)}
            className={`transition-all duration-300 ${isCountingDown ? 'blur-sm opacity-50' : ''}`}
          />

          {/* ÏûÖÎ†• Ìï∏Îì§Îü¨ (Ïà®Í≤®ÏßÑ Ïù∏Ìíã) - TextRenderer ÏúÑÏóê Ìà¨Î™ÖÌïòÍ≤å */}
          <InputHandler
            onKeyPress={useTypingStore.getState().handleKeyPress}
            onBackspace={useTypingStore.getState().handleBackspace}
            onTestStart={startCountdown} // Ïπ¥Ïö¥Ìä∏Îã§Ïö¥ÏúºÎ°ú Î≥ÄÍ≤Ω
            onCompositionChange={handleCompositionChange}
            disabled={isCountingDown} // Ïπ¥Ïö¥Ìä∏Îã§Ïö¥ Ï§ëÏóêÎäî ÎπÑÌôúÏÑ±Ìôî
            className="absolute inset-0 cursor-text z-5"
          />
        </div>

        {/* Ïπ¥Ïö¥Ìä∏Îã§Ïö¥ Ïò§Î≤ÑÎ†àÏù¥ */}
        {isCountingDown && (
          <div 
            className="absolute inset-0 flex items-center justify-center rounded-lg z-30 bg-surface/90 backdrop-blur-sm"
          >
            <div className="text-center">
              <div className="text-6xl font-bold mb-4 animate-pulse text-typing-accent">
                {countdownValue === 0 ? 'ÏãúÏûë!' : countdownValue}
              </div>
              <p className="text-lg text-text-secondary">
                Ï§ÄÎπÑÌïòÏÑ∏Ïöî...
              </p>
            </div>
          </div>
        )}

        {/* Ïª®Ìä∏Î°§ Î≤ÑÌäºÎì§ */}
        <div className="flex justify-center gap-4 mt-6 relative z-40">
          {!isActive && !isCompleted && !isCountingDown && (
            <button
              onClick={startCountdown}
              className="btn btn-primary px-6 py-2"
            >
              ÏãúÏûëÌïòÍ∏∞
            </button>
          )}
          
          {isActive && !isPaused && !isCompleted && (
            <>
              <button
                onClick={pauseTest}
                className="btn btn-secondary px-4 py-2 flex items-center gap-2"
              >
                <PauseCircle className="w-5 h-5" />
                ÏùºÏãúÏ†ïÏßÄ
              </button>
              <button
                onClick={stopTest}
                className="btn btn-outline px-4 py-2 flex items-center gap-2"
              >
                <StopCircle className="w-5 h-5" />
                Ï§ëÎã®
              </button>
            </>
          )}
          
          {isPaused && (
            <>
              <button
                onClick={resumeTest}
                className="btn btn-primary px-4 py-2 flex items-center gap-2"
              >
                <PlayCircle className="w-5 h-5" />
                Í≥ÑÏÜç
              </button>
              <button
                onClick={stopTest}
                className="btn btn-outline px-4 py-2 flex items-center gap-2"
              >
                <StopCircle className="w-5 h-5" />
                Ï§ëÎã®
              </button>
            </>
          )}
        </div>

        {/* ÏïàÎÇ¥Î¨∏Íµ¨ - ÌÖçÏä§Ìä∏Î∞ïÏä§ ÏïÑÎûò */}
        <div
          className="text-center"
          style={{ marginTop: "var(--spacing-lg)" }}
        >
          {!isActive && !isCompleted && !isCountingDown && (
            <p className="text-md text-muted">
              <kbd>ÌÅ¥Î¶≠</kbd> or <kbd>ÌÇ§</kbd>ÏûÖÎ†•ÏúºÎ°ú ÏãúÏûë
            </p>
          )}
          {!isCompleted && (
            <p
              className="text-sm text-muted"
              style={{ marginTop: "var(--spacing-xs)" }}
            >
              ÏÉàÎ°ú ÏãúÏûë <kbd>Shift</kbd> + <kbd>Enter</kbd>
            </p>
          )}
        </div>

        {isPaused && (
          <div className="absolute inset-0 flex items-center justify-center rounded-lg z-20">
            <div className="text-center bg-surface bg-opacity-98 p-6 rounded-lg shadow-2xl border border-typing-accent border-opacity-30">
              <p className="text-lg mb-2 text-typing-accent">ÏùºÏãúÏ†ïÏßÄÎê®</p>
              <p className="text-sm text-text-secondary">
                Í≥ÑÏÜçÌïòÎ†§Î©¥ ÏïÑÎ¨¥ ÌÇ§ÎÇò ÎàÑÎ•¥ÏÑ∏Ïöî
              </p>
            </div>
          </div>
        )}
      </div>

      {/* ÌÖåÏä§Ìä∏ ÏôÑÎ£å Ïãú stats ÌéòÏù¥ÏßÄÎ°ú ÏûêÎèô Ïù¥Îèô */}
      {isCompleted && (
        <div className="mt-6 text-center">
          <div className="card">
            <div className="card-content py-8">
              <div className="animate-pulse text-accent title-md">
                Í≤∞Í≥ºÎ•º Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§
              </div>
              <div className="text-sm text-secondary mt-2">
                Ïû†Ïãú ÌõÑ ÌÜµÍ≥Ñ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
